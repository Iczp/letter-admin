// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
  formDataBodySerializer
} from '@hey-api/client-axios';
import type {
  AppControllerGetInfoError,
  AppControllerGetInfoResponse,
  AppControllerGetTablesError,
  AppControllerGetTablesResponse,
  AppControllerGetTableData,
  AppControllerGetTableError,
  AppControllerGetTableResponse,
  AppControllerGetAboutError,
  AppControllerGetAboutResponse,
  UsersControllerGetListData,
  UsersControllerGetListError,
  UsersControllerGetListResponse,
  UsersControllerCreateData,
  UsersControllerCreateError,
  UsersControllerCreateResponse,
  UsersControllerGetItemData,
  UsersControllerGetItemError,
  UsersControllerGetItemResponse,
  UsersControllerUpdateData,
  UsersControllerUpdateError,
  UsersControllerUpdateResponse,
  UsersControllerSetIsEnabledData,
  UsersControllerSetIsEnabledError,
  UsersControllerSetIsEnabledResponse,
  UsersControllerGetExcelTemplateError,
  UsersControllerGetExcelTemplateResponse,
  UsersControllerExportExcelError,
  UsersControllerExportExcelResponse,
  UsersControllerImportExcelData,
  UsersControllerImportExcelError,
  UsersControllerImportExcelResponse,
  ActivitiesControllerGetListData,
  ActivitiesControllerGetListError,
  ActivitiesControllerGetListResponse,
  ActivitiesControllerCreateData,
  ActivitiesControllerCreateError,
  ActivitiesControllerCreateResponse,
  ActivitiesControllerGetListByCurrentUserError,
  ActivitiesControllerGetListByCurrentUserResponse,
  ActivitiesControllerGetItemData,
  ActivitiesControllerGetItemError,
  ActivitiesControllerGetItemResponse,
  ActivitiesControllerUpdateData,
  ActivitiesControllerUpdateError,
  ActivitiesControllerUpdateResponse,
  ActivitiesControllerDeleteData,
  ActivitiesControllerDeleteError,
  ActivitiesControllerDeleteResponse,
  ActivitiesControllerSetIsEnabledData,
  ActivitiesControllerSetIsEnabledError,
  ActivitiesControllerSetIsEnabledResponse,
  ActivitiesControllerGetExcelTemplateError,
  ActivitiesControllerGetExcelTemplateResponse,
  ActivitiesControllerExportExcelError,
  ActivitiesControllerExportExcelResponse,
  ActivitiesControllerImportExcelData,
  ActivitiesControllerImportExcelError,
  ActivitiesControllerImportExcelResponse,
  ActivityCustomerControllerGetListData,
  ActivityCustomerControllerGetListError,
  ActivityCustomerControllerGetListResponse,
  ActivityCustomerControllerCreateData,
  ActivityCustomerControllerCreateError,
  ActivityCustomerControllerCreateResponse,
  ActivityCustomerControllerGetItemData,
  ActivityCustomerControllerGetItemError,
  ActivityCustomerControllerGetItemResponse,
  ActivityCustomerControllerUpdateData,
  ActivityCustomerControllerUpdateError,
  ActivityCustomerControllerUpdateResponse,
  ActivityCustomerControllerDeleteData,
  ActivityCustomerControllerDeleteError,
  ActivityCustomerControllerDeleteResponse,
  ActivityCustomerControllerSetIsCheckedData,
  ActivityCustomerControllerSetIsCheckedError,
  ActivityCustomerControllerSetIsCheckedResponse,
  ActivityCustomerControllerSetIsActivedData,
  ActivityCustomerControllerSetIsActivedError,
  ActivityCustomerControllerSetIsActivedResponse,
  ActivityCustomerControllerExportExcelData,
  ActivityCustomerControllerExportExcelError,
  ActivityCustomerControllerExportExcelResponse,
  ActivityCustomerControllerSetIsEnabledData,
  ActivityCustomerControllerSetIsEnabledError,
  ActivityCustomerControllerSetIsEnabledResponse,
  ActivityCustomerControllerGetExcelTemplateError,
  ActivityCustomerControllerGetExcelTemplateResponse,
  ActivityCustomerControllerImportExcelData,
  ActivityCustomerControllerImportExcelError,
  ActivityCustomerControllerImportExcelResponse,
  ActivityCustomerInvitersControllerGetListData,
  ActivityCustomerInvitersControllerGetListError,
  ActivityCustomerInvitersControllerGetListResponse,
  ActivityCustomerInvitersControllerCreateData,
  ActivityCustomerInvitersControllerCreateError,
  ActivityCustomerInvitersControllerCreateResponse,
  ActivityCustomerInvitersControllerGetItemData,
  ActivityCustomerInvitersControllerGetItemError,
  ActivityCustomerInvitersControllerGetItemResponse,
  ActivityCustomerInvitersControllerUpdateData,
  ActivityCustomerInvitersControllerUpdateError,
  ActivityCustomerInvitersControllerUpdateResponse,
  ActivityCustomerInvitersControllerDeleteData,
  ActivityCustomerInvitersControllerDeleteError,
  ActivityCustomerInvitersControllerDeleteResponse,
  ActivityCustomerInvitersControllerSetIsEnabledData,
  ActivityCustomerInvitersControllerSetIsEnabledError,
  ActivityCustomerInvitersControllerSetIsEnabledResponse,
  ActivityCustomerInvitersControllerGetExcelTemplateError,
  ActivityCustomerInvitersControllerGetExcelTemplateResponse,
  ActivityCustomerInvitersControllerExportExcelError,
  ActivityCustomerInvitersControllerExportExcelResponse,
  ActivityCustomerInvitersControllerImportExcelData,
  ActivityCustomerInvitersControllerImportExcelError,
  ActivityCustomerInvitersControllerImportExcelResponse,
  AuthControllerSignInData,
  AuthControllerSignInError,
  AuthControllerSignInResponse,
  AuthControllerGetProfileError,
  AuthControllerGetProfileResponse,
  AuthControllerRefreshTokenError,
  AuthControllerRefreshTokenResponse,
  SeedControllerSeedError,
  SeedControllerSeedResponse,
  RolesControllerGetListData,
  RolesControllerGetListError,
  RolesControllerGetListResponse,
  RolesControllerCreateData,
  RolesControllerCreateError,
  RolesControllerCreateResponse,
  RolesControllerGetItemData,
  RolesControllerGetItemError,
  RolesControllerGetItemResponse,
  RolesControllerUpdateData,
  RolesControllerUpdateError,
  RolesControllerUpdateResponse,
  RolesControllerDeleteData,
  RolesControllerDeleteError,
  RolesControllerDeleteResponse,
  RolesControllerSetPermissionsData,
  RolesControllerSetPermissionsError,
  RolesControllerSetPermissionsResponse,
  RolesControllerSetIsEnabledData,
  RolesControllerSetIsEnabledError,
  RolesControllerSetIsEnabledResponse,
  RolesControllerGetExcelTemplateError,
  RolesControllerGetExcelTemplateResponse,
  RolesControllerExportExcelError,
  RolesControllerExportExcelResponse,
  RolesControllerImportExcelData,
  RolesControllerImportExcelError,
  RolesControllerImportExcelResponse,
  AuditsControllerGetListData,
  AuditsControllerGetListError,
  AuditsControllerGetListResponse,
  AuditsControllerGetItemData,
  AuditsControllerGetItemError,
  AuditsControllerGetItemResponse,
  AuditsControllerSetIsEnabledData,
  AuditsControllerSetIsEnabledError,
  AuditsControllerSetIsEnabledResponse,
  AuditsControllerGetExcelTemplateError,
  AuditsControllerGetExcelTemplateResponse,
  AuditsControllerExportExcelError,
  AuditsControllerExportExcelResponse,
  AuditsControllerImportExcelData,
  AuditsControllerImportExcelError,
  AuditsControllerImportExcelResponse,
  ErpUsersControllerFindAllData,
  ErpUsersControllerFindAllError,
  ErpUsersControllerFindAllResponse,
  ErpUsersControllerFindOneData,
  ErpUsersControllerFindOneError,
  ErpUsersControllerFindOneResponse,
  InviterConfigControllerGetListData,
  InviterConfigControllerGetListError,
  InviterConfigControllerGetListResponse,
  InviterConfigControllerCreateData,
  InviterConfigControllerCreateError,
  InviterConfigControllerCreateResponse,
  InviterConfigControllerGetItemData,
  InviterConfigControllerGetItemError,
  InviterConfigControllerGetItemResponse,
  InviterConfigControllerUpdateData,
  InviterConfigControllerUpdateError,
  InviterConfigControllerUpdateResponse,
  InviterConfigControllerDeleteData,
  InviterConfigControllerDeleteError,
  InviterConfigControllerDeleteResponse,
  InviterConfigControllerGetItemByCurrentUserError,
  InviterConfigControllerGetItemByCurrentUserResponse,
  InviterConfigControllerSetIsEnabledData,
  InviterConfigControllerSetIsEnabledError,
  InviterConfigControllerSetIsEnabledResponse,
  InviterConfigControllerGetExcelTemplateError,
  InviterConfigControllerGetExcelTemplateResponse,
  InviterConfigControllerExportExcelError,
  InviterConfigControllerExportExcelResponse,
  InviterConfigControllerImportExcelData,
  InviterConfigControllerImportExcelError,
  InviterConfigControllerImportExcelResponse
} from './types.gen';

export const client = createClient(createConfig());

/**
 * 关于 App Test
 */
export const appControllerGetInfo = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    AppControllerGetInfoResponse,
    AppControllerGetInfoError,
    ThrowOnError
  >({
    ...options,
    url: '/api/test'
  });
};

/**
 * get tables
 */
export const appControllerGetTables = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    AppControllerGetTablesResponse,
    AppControllerGetTablesError,
    ThrowOnError
  >({
    ...options,
    url: '/api/tables'
  });
};

/**
 * get table
 */
export const appControllerGetTable = <ThrowOnError extends boolean = false>(
  options: Options<AppControllerGetTableData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    AppControllerGetTableResponse,
    AppControllerGetTableError,
    ThrowOnError
  >({
    ...options,
    url: '/api/table'
  });
};

/**
 * 关于 App 信息
 * 返回 AppInfo
 */
export const appControllerGetAbout = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    AppControllerGetAboutResponse,
    AppControllerGetAboutError,
    ThrowOnError
  >({
    ...options,
    url: '/api/about'
  });
};

/**
 * 用户列表
 */
export const usersControllerGetList = <ThrowOnError extends boolean = false>(
  options?: Options<UsersControllerGetListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    UsersControllerGetListResponse,
    UsersControllerGetListError,
    ThrowOnError
  >({
    ...options,
    url: '/api/user'
  });
};

/**
 * 创建用户
 */
export const usersControllerCreate = <ThrowOnError extends boolean = false>(
  options: Options<UsersControllerCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    UsersControllerCreateResponse,
    UsersControllerCreateError,
    ThrowOnError
  >({
    ...options,
    url: '/api/user'
  });
};

/**
 * 用户详情
 */
export const usersControllerGetItem = <ThrowOnError extends boolean = false>(
  options: Options<UsersControllerGetItemData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    UsersControllerGetItemResponse,
    UsersControllerGetItemError,
    ThrowOnError
  >({
    ...options,
    url: '/api/user/{id}'
  });
};

/**
 * 修改用户
 */
export const usersControllerUpdate = <ThrowOnError extends boolean = false>(
  options: Options<UsersControllerUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    UsersControllerUpdateResponse,
    UsersControllerUpdateError,
    ThrowOnError
  >({
    ...options,
    url: '/api/user/{id}'
  });
};

/**
 * 启用/禁用
 * 启用/禁用
 */
export const usersControllerSetIsEnabled = <ThrowOnError extends boolean = false>(
  options: Options<UsersControllerSetIsEnabledData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    UsersControllerSetIsEnabledResponse,
    UsersControllerSetIsEnabledError,
    ThrowOnError
  >({
    ...options,
    url: '/api/user/enabled/{id}'
  });
};

/**
 * excel 模板
 * excel 模板
 */
export const usersControllerGetExcelTemplate = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    UsersControllerGetExcelTemplateResponse,
    UsersControllerGetExcelTemplateError,
    ThrowOnError
  >({
    ...options,
    url: '/api/user/excel/tpl'
  });
};

/**
 * 导出数据到 Excel
 * Excel 数据
 */
export const usersControllerExportExcel = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    UsersControllerExportExcelResponse,
    UsersControllerExportExcelError,
    ThrowOnError
  >({
    ...options,
    url: '/api/user/excel/output'
  });
};

/**
 * 导入数据
 * 请从 "/xxx/excel/tpl" 中下载模板
 */
export const usersControllerImportExcel = <ThrowOnError extends boolean = false>(
  options: Options<UsersControllerImportExcelData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    UsersControllerImportExcelResponse,
    UsersControllerImportExcelError,
    ThrowOnError
  >({
    ...options,
    ...formDataBodySerializer,
    headers: {
      'Content-Type': null,
      ...options?.headers
    },
    url: '/api/user/excel/import'
  });
};

/**
 * 活动列表
 */
export const activitiesControllerGetList = <ThrowOnError extends boolean = false>(
  options?: Options<ActivitiesControllerGetListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ActivitiesControllerGetListResponse,
    ActivitiesControllerGetListError,
    ThrowOnError
  >({
    ...options,
    url: '/api/activities'
  });
};

/**
 * 创建活动
 */
export const activitiesControllerCreate = <ThrowOnError extends boolean = false>(
  options: Options<ActivitiesControllerCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    ActivitiesControllerCreateResponse,
    ActivitiesControllerCreateError,
    ThrowOnError
  >({
    ...options,
    url: '/api/activities'
  });
};

/**
 * 活动列表
 */
export const activitiesControllerGetListByCurrentUser = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ActivitiesControllerGetListByCurrentUserResponse,
    ActivitiesControllerGetListByCurrentUserError,
    ThrowOnError
  >({
    ...options,
    url: '/api/activities/current-user/list'
  });
};

/**
 * 活动详情
 */
export const activitiesControllerGetItem = <ThrowOnError extends boolean = false>(
  options: Options<ActivitiesControllerGetItemData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ActivitiesControllerGetItemResponse,
    ActivitiesControllerGetItemError,
    ThrowOnError
  >({
    ...options,
    url: '/api/activities/{id}'
  });
};

/**
 * 修改活动
 */
export const activitiesControllerUpdate = <ThrowOnError extends boolean = false>(
  options: Options<ActivitiesControllerUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    ActivitiesControllerUpdateResponse,
    ActivitiesControllerUpdateError,
    ThrowOnError
  >({
    ...options,
    url: '/api/activities/{id}'
  });
};

/**
 * 删除活动
 */
export const activitiesControllerDelete = <ThrowOnError extends boolean = false>(
  options: Options<ActivitiesControllerDeleteData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    ActivitiesControllerDeleteResponse,
    ActivitiesControllerDeleteError,
    ThrowOnError
  >({
    ...options,
    url: '/api/activities/{id}'
  });
};

/**
 * 启用/禁用
 * 启用/禁用
 */
export const activitiesControllerSetIsEnabled = <ThrowOnError extends boolean = false>(
  options: Options<ActivitiesControllerSetIsEnabledData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    ActivitiesControllerSetIsEnabledResponse,
    ActivitiesControllerSetIsEnabledError,
    ThrowOnError
  >({
    ...options,
    url: '/api/activities/enabled/{id}'
  });
};

/**
 * excel 模板
 * excel 模板
 */
export const activitiesControllerGetExcelTemplate = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ActivitiesControllerGetExcelTemplateResponse,
    ActivitiesControllerGetExcelTemplateError,
    ThrowOnError
  >({
    ...options,
    url: '/api/activities/excel/tpl'
  });
};

/**
 * 导出数据到 Excel
 * Excel 数据
 */
export const activitiesControllerExportExcel = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ActivitiesControllerExportExcelResponse,
    ActivitiesControllerExportExcelError,
    ThrowOnError
  >({
    ...options,
    url: '/api/activities/excel/output'
  });
};

/**
 * 导入数据
 * 请从 "/xxx/excel/tpl" 中下载模板
 */
export const activitiesControllerImportExcel = <ThrowOnError extends boolean = false>(
  options: Options<ActivitiesControllerImportExcelData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    ActivitiesControllerImportExcelResponse,
    ActivitiesControllerImportExcelError,
    ThrowOnError
  >({
    ...options,
    ...formDataBodySerializer,
    headers: {
      'Content-Type': null,
      ...options?.headers
    },
    url: '/api/activities/excel/import'
  });
};

/**
 * [活动客户]列表
 */
export const activityCustomerControllerGetList = <ThrowOnError extends boolean = false>(
  options?: Options<ActivityCustomerControllerGetListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ActivityCustomerControllerGetListResponse,
    ActivityCustomerControllerGetListError,
    ThrowOnError
  >({
    ...options,
    url: '/api/activity-customer'
  });
};

/**
 * 创建[活动客户]
 */
export const activityCustomerControllerCreate = <ThrowOnError extends boolean = false>(
  options: Options<ActivityCustomerControllerCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    ActivityCustomerControllerCreateResponse,
    ActivityCustomerControllerCreateError,
    ThrowOnError
  >({
    ...options,
    url: '/api/activity-customer'
  });
};

/**
 * [活动客户]详情
 */
export const activityCustomerControllerGetItem = <ThrowOnError extends boolean = false>(
  options: Options<ActivityCustomerControllerGetItemData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ActivityCustomerControllerGetItemResponse,
    ActivityCustomerControllerGetItemError,
    ThrowOnError
  >({
    ...options,
    url: '/api/activity-customer/{id}'
  });
};

/**
 * 修改[活动客户]
 */
export const activityCustomerControllerUpdate = <ThrowOnError extends boolean = false>(
  options: Options<ActivityCustomerControllerUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    ActivityCustomerControllerUpdateResponse,
    ActivityCustomerControllerUpdateError,
    ThrowOnError
  >({
    ...options,
    url: '/api/activity-customer/{id}'
  });
};

/**
 * 删除[活动客户]
 */
export const activityCustomerControllerDelete = <ThrowOnError extends boolean = false>(
  options: Options<ActivityCustomerControllerDeleteData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    ActivityCustomerControllerDeleteResponse,
    ActivityCustomerControllerDeleteError,
    ThrowOnError
  >({
    ...options,
    url: '/api/activity-customer/{id}'
  });
};

/**
 * 设置 是否签到
 */
export const activityCustomerControllerSetIsChecked = <ThrowOnError extends boolean = false>(
  options: Options<ActivityCustomerControllerSetIsCheckedData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    ActivityCustomerControllerSetIsCheckedResponse,
    ActivityCustomerControllerSetIsCheckedError,
    ThrowOnError
  >({
    ...options,
    url: '/api/activity-customer/checked/{id}'
  });
};

/**
 * 设置 是否已邀请
 */
export const activityCustomerControllerSetIsActived = <ThrowOnError extends boolean = false>(
  options: Options<ActivityCustomerControllerSetIsActivedData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    ActivityCustomerControllerSetIsActivedResponse,
    ActivityCustomerControllerSetIsActivedError,
    ThrowOnError
  >({
    ...options,
    url: '/api/activity-customer/invited/{id}'
  });
};

/**
 * [活动客户]导出 excel
 * 导出excel 单次导出数据不能太多
 */
export const activityCustomerControllerExportExcel = <ThrowOnError extends boolean = false>(
  options?: Options<ActivityCustomerControllerExportExcelData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ActivityCustomerControllerExportExcelResponse,
    ActivityCustomerControllerExportExcelError,
    ThrowOnError
  >({
    ...options,
    url: '/api/activity-customer/excel/output'
  });
};

/**
 * 启用/禁用
 * 启用/禁用
 */
export const activityCustomerControllerSetIsEnabled = <ThrowOnError extends boolean = false>(
  options: Options<ActivityCustomerControllerSetIsEnabledData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    ActivityCustomerControllerSetIsEnabledResponse,
    ActivityCustomerControllerSetIsEnabledError,
    ThrowOnError
  >({
    ...options,
    url: '/api/activity-customer/enabled/{id}'
  });
};

/**
 * excel 模板
 * excel 模板
 */
export const activityCustomerControllerGetExcelTemplate = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ActivityCustomerControllerGetExcelTemplateResponse,
    ActivityCustomerControllerGetExcelTemplateError,
    ThrowOnError
  >({
    ...options,
    url: '/api/activity-customer/excel/tpl'
  });
};

/**
 * 导入数据
 * 请从 "/xxx/excel/tpl" 中下载模板
 */
export const activityCustomerControllerImportExcel = <ThrowOnError extends boolean = false>(
  options: Options<ActivityCustomerControllerImportExcelData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    ActivityCustomerControllerImportExcelResponse,
    ActivityCustomerControllerImportExcelError,
    ThrowOnError
  >({
    ...options,
    ...formDataBodySerializer,
    headers: {
      'Content-Type': null,
      ...options?.headers
    },
    url: '/api/activity-customer/excel/import'
  });
};

/**
 * 客户列表
 */
export const activityCustomerInvitersControllerGetList = <ThrowOnError extends boolean = false>(
  options?: Options<ActivityCustomerInvitersControllerGetListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ActivityCustomerInvitersControllerGetListResponse,
    ActivityCustomerInvitersControllerGetListError,
    ThrowOnError
  >({
    ...options,
    url: '/api/activity-customer-inviters'
  });
};

/**
 * 创建客户
 */
export const activityCustomerInvitersControllerCreate = <ThrowOnError extends boolean = false>(
  options: Options<ActivityCustomerInvitersControllerCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    ActivityCustomerInvitersControllerCreateResponse,
    ActivityCustomerInvitersControllerCreateError,
    ThrowOnError
  >({
    ...options,
    url: '/api/activity-customer-inviters'
  });
};

/**
 * 客户详情
 */
export const activityCustomerInvitersControllerGetItem = <ThrowOnError extends boolean = false>(
  options: Options<ActivityCustomerInvitersControllerGetItemData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ActivityCustomerInvitersControllerGetItemResponse,
    ActivityCustomerInvitersControllerGetItemError,
    ThrowOnError
  >({
    ...options,
    url: '/api/activity-customer-inviters/{id}'
  });
};

/**
 * 修改客户
 */
export const activityCustomerInvitersControllerUpdate = <ThrowOnError extends boolean = false>(
  options: Options<ActivityCustomerInvitersControllerUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    ActivityCustomerInvitersControllerUpdateResponse,
    ActivityCustomerInvitersControllerUpdateError,
    ThrowOnError
  >({
    ...options,
    url: '/api/activity-customer-inviters/{id}'
  });
};

/**
 * 删除客户
 */
export const activityCustomerInvitersControllerDelete = <ThrowOnError extends boolean = false>(
  options: Options<ActivityCustomerInvitersControllerDeleteData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    ActivityCustomerInvitersControllerDeleteResponse,
    ActivityCustomerInvitersControllerDeleteError,
    ThrowOnError
  >({
    ...options,
    url: '/api/activity-customer-inviters/{id}'
  });
};

/**
 * 启用/禁用
 * 启用/禁用
 */
export const activityCustomerInvitersControllerSetIsEnabled = <
  ThrowOnError extends boolean = false
>(
  options: Options<ActivityCustomerInvitersControllerSetIsEnabledData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    ActivityCustomerInvitersControllerSetIsEnabledResponse,
    ActivityCustomerInvitersControllerSetIsEnabledError,
    ThrowOnError
  >({
    ...options,
    url: '/api/activity-customer-inviters/enabled/{id}'
  });
};

/**
 * excel 模板
 * excel 模板
 */
export const activityCustomerInvitersControllerGetExcelTemplate = <
  ThrowOnError extends boolean = false
>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ActivityCustomerInvitersControllerGetExcelTemplateResponse,
    ActivityCustomerInvitersControllerGetExcelTemplateError,
    ThrowOnError
  >({
    ...options,
    url: '/api/activity-customer-inviters/excel/tpl'
  });
};

/**
 * 导出数据到 Excel
 * Excel 数据
 */
export const activityCustomerInvitersControllerExportExcel = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ActivityCustomerInvitersControllerExportExcelResponse,
    ActivityCustomerInvitersControllerExportExcelError,
    ThrowOnError
  >({
    ...options,
    url: '/api/activity-customer-inviters/excel/output'
  });
};

/**
 * 导入数据
 * 请从 "/xxx/excel/tpl" 中下载模板
 */
export const activityCustomerInvitersControllerImportExcel = <ThrowOnError extends boolean = false>(
  options: Options<ActivityCustomerInvitersControllerImportExcelData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    ActivityCustomerInvitersControllerImportExcelResponse,
    ActivityCustomerInvitersControllerImportExcelError,
    ThrowOnError
  >({
    ...options,
    ...formDataBodySerializer,
    headers: {
      'Content-Type': null,
      ...options?.headers
    },
    url: '/api/activity-customer-inviters/excel/import'
  });
};

export const authControllerSignIn = <ThrowOnError extends boolean = false>(
  options: Options<AuthControllerSignInData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    AuthControllerSignInResponse,
    AuthControllerSignInError,
    ThrowOnError
  >({
    ...options,
    url: '/api/auth/login'
  });
};

export const authControllerGetProfile = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    AuthControllerGetProfileResponse,
    AuthControllerGetProfileError,
    ThrowOnError
  >({
    ...options,
    url: '/api/auth/profile'
  });
};

export const authControllerRefreshToken = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    AuthControllerRefreshTokenResponse,
    AuthControllerRefreshTokenError,
    ThrowOnError
  >({
    ...options,
    url: '/api/auth/refresh-token'
  });
};

/**
 * 种子数据
 */
export const seedControllerSeed = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    SeedControllerSeedResponse,
    SeedControllerSeedError,
    ThrowOnError
  >({
    ...options,
    url: '/api/seed'
  });
};

/**
 * 角色列表
 */
export const rolesControllerGetList = <ThrowOnError extends boolean = false>(
  options?: Options<RolesControllerGetListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RolesControllerGetListResponse,
    RolesControllerGetListError,
    ThrowOnError
  >({
    ...options,
    url: '/api/roles'
  });
};

/**
 * 创建角色
 */
export const rolesControllerCreate = <ThrowOnError extends boolean = false>(
  options: Options<RolesControllerCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    RolesControllerCreateResponse,
    RolesControllerCreateError,
    ThrowOnError
  >({
    ...options,
    url: '/api/roles'
  });
};

/**
 * 角色详情
 */
export const rolesControllerGetItem = <ThrowOnError extends boolean = false>(
  options: Options<RolesControllerGetItemData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RolesControllerGetItemResponse,
    RolesControllerGetItemError,
    ThrowOnError
  >({
    ...options,
    url: '/api/roles/{id}'
  });
};

/**
 * 修改角色
 */
export const rolesControllerUpdate = <ThrowOnError extends boolean = false>(
  options: Options<RolesControllerUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    RolesControllerUpdateResponse,
    RolesControllerUpdateError,
    ThrowOnError
  >({
    ...options,
    url: '/api/roles/{id}'
  });
};

/**
 * 删除角色
 */
export const rolesControllerDelete = <ThrowOnError extends boolean = false>(
  options: Options<RolesControllerDeleteData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    RolesControllerDeleteResponse,
    RolesControllerDeleteError,
    ThrowOnError
  >({
    ...options,
    url: '/api/roles/{id}'
  });
};

/**
 * 设置权限
 */
export const rolesControllerSetPermissions = <ThrowOnError extends boolean = false>(
  options: Options<RolesControllerSetPermissionsData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    RolesControllerSetPermissionsResponse,
    RolesControllerSetPermissionsError,
    ThrowOnError
  >({
    ...options,
    url: '/api/roles/permissions/{id}'
  });
};

/**
 * 启用/禁用
 * 启用/禁用
 */
export const rolesControllerSetIsEnabled = <ThrowOnError extends boolean = false>(
  options: Options<RolesControllerSetIsEnabledData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    RolesControllerSetIsEnabledResponse,
    RolesControllerSetIsEnabledError,
    ThrowOnError
  >({
    ...options,
    url: '/api/roles/enabled/{id}'
  });
};

/**
 * excel 模板
 * excel 模板
 */
export const rolesControllerGetExcelTemplate = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RolesControllerGetExcelTemplateResponse,
    RolesControllerGetExcelTemplateError,
    ThrowOnError
  >({
    ...options,
    url: '/api/roles/excel/tpl'
  });
};

/**
 * 导出数据到 Excel
 * Excel 数据
 */
export const rolesControllerExportExcel = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    RolesControllerExportExcelResponse,
    RolesControllerExportExcelError,
    ThrowOnError
  >({
    ...options,
    url: '/api/roles/excel/output'
  });
};

/**
 * 导入数据
 * 请从 "/xxx/excel/tpl" 中下载模板
 */
export const rolesControllerImportExcel = <ThrowOnError extends boolean = false>(
  options: Options<RolesControllerImportExcelData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    RolesControllerImportExcelResponse,
    RolesControllerImportExcelError,
    ThrowOnError
  >({
    ...options,
    ...formDataBodySerializer,
    headers: {
      'Content-Type': null,
      ...options?.headers
    },
    url: '/api/roles/excel/import'
  });
};

/**
 * 审计日志列表
 */
export const auditsControllerGetList = <ThrowOnError extends boolean = false>(
  options?: Options<AuditsControllerGetListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    AuditsControllerGetListResponse,
    AuditsControllerGetListError,
    ThrowOnError
  >({
    ...options,
    url: '/api/audits'
  });
};

/**
 * 审计日志详情
 */
export const auditsControllerGetItem = <ThrowOnError extends boolean = false>(
  options: Options<AuditsControllerGetItemData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    AuditsControllerGetItemResponse,
    AuditsControllerGetItemError,
    ThrowOnError
  >({
    ...options,
    url: '/api/audits/{id}'
  });
};

/**
 * 启用/禁用
 * 启用/禁用
 */
export const auditsControllerSetIsEnabled = <ThrowOnError extends boolean = false>(
  options: Options<AuditsControllerSetIsEnabledData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    AuditsControllerSetIsEnabledResponse,
    AuditsControllerSetIsEnabledError,
    ThrowOnError
  >({
    ...options,
    url: '/api/audits/enabled/{id}'
  });
};

/**
 * excel 模板
 * excel 模板
 */
export const auditsControllerGetExcelTemplate = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    AuditsControllerGetExcelTemplateResponse,
    AuditsControllerGetExcelTemplateError,
    ThrowOnError
  >({
    ...options,
    url: '/api/audits/excel/tpl'
  });
};

/**
 * 导出数据到 Excel
 * Excel 数据
 */
export const auditsControllerExportExcel = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    AuditsControllerExportExcelResponse,
    AuditsControllerExportExcelError,
    ThrowOnError
  >({
    ...options,
    url: '/api/audits/excel/output'
  });
};

/**
 * 导入数据
 * 请从 "/xxx/excel/tpl" 中下载模板
 */
export const auditsControllerImportExcel = <ThrowOnError extends boolean = false>(
  options: Options<AuditsControllerImportExcelData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    AuditsControllerImportExcelResponse,
    AuditsControllerImportExcelError,
    ThrowOnError
  >({
    ...options,
    ...formDataBodySerializer,
    headers: {
      'Content-Type': null,
      ...options?.headers
    },
    url: '/api/audits/excel/import'
  });
};

/**
 * ERP 用户列表
 */
export const erpUsersControllerFindAll = <ThrowOnError extends boolean = false>(
  options?: Options<ErpUsersControllerFindAllData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ErpUsersControllerFindAllResponse,
    ErpUsersControllerFindAllError,
    ThrowOnError
  >({
    ...options,
    url: '/api/erp-users'
  });
};

/**
 * ERP 用户详情
 */
export const erpUsersControllerFindOne = <ThrowOnError extends boolean = false>(
  options: Options<ErpUsersControllerFindOneData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ErpUsersControllerFindOneResponse,
    ErpUsersControllerFindOneError,
    ThrowOnError
  >({
    ...options,
    url: '/api/erp-users/{id}'
  });
};

/**
 * 邀请人列表
 */
export const inviterConfigControllerGetList = <ThrowOnError extends boolean = false>(
  options?: Options<InviterConfigControllerGetListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    InviterConfigControllerGetListResponse,
    InviterConfigControllerGetListError,
    ThrowOnError
  >({
    ...options,
    url: '/api/inviter-config'
  });
};

/**
 * 创建邀请人
 */
export const inviterConfigControllerCreate = <ThrowOnError extends boolean = false>(
  options: Options<InviterConfigControllerCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    InviterConfigControllerCreateResponse,
    InviterConfigControllerCreateError,
    ThrowOnError
  >({
    ...options,
    url: '/api/inviter-config'
  });
};

/**
 * 邀请人详情
 */
export const inviterConfigControllerGetItem = <ThrowOnError extends boolean = false>(
  options: Options<InviterConfigControllerGetItemData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    InviterConfigControllerGetItemResponse,
    InviterConfigControllerGetItemError,
    ThrowOnError
  >({
    ...options,
    url: '/api/inviter-config/{id}'
  });
};

/**
 * 修改邀请人
 */
export const inviterConfigControllerUpdate = <ThrowOnError extends boolean = false>(
  options: Options<InviterConfigControllerUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    InviterConfigControllerUpdateResponse,
    InviterConfigControllerUpdateError,
    ThrowOnError
  >({
    ...options,
    url: '/api/inviter-config/{id}'
  });
};

/**
 * 删除邀请人
 */
export const inviterConfigControllerDelete = <ThrowOnError extends boolean = false>(
  options: Options<InviterConfigControllerDeleteData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    InviterConfigControllerDeleteResponse,
    InviterConfigControllerDeleteError,
    ThrowOnError
  >({
    ...options,
    url: '/api/inviter-config/{id}'
  });
};

/**
 * 邀请人详情
 */
export const inviterConfigControllerGetItemByCurrentUser = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    InviterConfigControllerGetItemByCurrentUserResponse,
    InviterConfigControllerGetItemByCurrentUserError,
    ThrowOnError
  >({
    ...options,
    url: '/api/inviter-config/current-user/item'
  });
};

/**
 * 启用/禁用
 * 启用/禁用
 */
export const inviterConfigControllerSetIsEnabled = <ThrowOnError extends boolean = false>(
  options: Options<InviterConfigControllerSetIsEnabledData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    InviterConfigControllerSetIsEnabledResponse,
    InviterConfigControllerSetIsEnabledError,
    ThrowOnError
  >({
    ...options,
    url: '/api/inviter-config/enabled/{id}'
  });
};

/**
 * excel 模板
 * excel 模板
 */
export const inviterConfigControllerGetExcelTemplate = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    InviterConfigControllerGetExcelTemplateResponse,
    InviterConfigControllerGetExcelTemplateError,
    ThrowOnError
  >({
    ...options,
    url: '/api/inviter-config/excel/tpl'
  });
};

/**
 * 导出数据到 Excel
 * Excel 数据
 */
export const inviterConfigControllerExportExcel = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    InviterConfigControllerExportExcelResponse,
    InviterConfigControllerExportExcelError,
    ThrowOnError
  >({
    ...options,
    url: '/api/inviter-config/excel/output'
  });
};

/**
 * 导入数据
 * 请从 "/xxx/excel/tpl" 中下载模板
 */
export const inviterConfigControllerImportExcel = <ThrowOnError extends boolean = false>(
  options: Options<InviterConfigControllerImportExcelData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    InviterConfigControllerImportExcelResponse,
    InviterConfigControllerImportExcelError,
    ThrowOnError
  >({
    ...options,
    ...formDataBodySerializer,
    headers: {
      'Content-Type': null,
      ...options?.headers
    },
    url: '/api/inviter-config/excel/import'
  });
};
