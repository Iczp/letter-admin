// This file is auto-generated by @hey-api/openapi-ts

export const AppInfoSchema = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
      default: 'letter',
    },
    version: {
      type: 'string',
      default: '0.0.26',
    },
    description: {
      type: 'string',
      default: '',
    },
    author: {
      type: 'string',
      default: 'zhongpei <1000@intry.cn>',
    },
    email: {
      type: 'string',
      default: '1000@intry.cn',
    },
    website: {
      type: 'string',
      default: 'https://iczp.net',
    },
  },
  required: ['name', 'version', 'description', 'author', 'email', 'website'],
} as const;

export const FabricObjectSchema = {
  type: 'object',
  properties: {
    visible: {
      type: 'boolean',
    },
    type: {
      enum: [
        'Image',
        'Textbox',
        'Rect',
        'Circle',
        'Path',
        'Triangle',
        'Group',
        'Polygon',
        'Polyline',
        'Line',
      ],
      type: 'string',
    },
    src: {
      type: 'string',
    },
    left: {
      type: 'number',
    },
    top: {
      type: 'number',
    },
    width: {
      type: 'number',
    },
    height: {
      type: 'number',
    },
    fill: {
      type: 'string',
    },
    opacity: {
      type: 'number',
    },
    scaleX: {
      type: 'number',
    },
    scaleY: {
      type: 'number',
    },
    text: {
      type: 'string',
    },
    fontWeight: {
      type: 'string',
    },
    fontSize: {
      type: 'number',
    },
    fontFamily: {
      type: 'string',
    },
  },
  required: ['visible', 'type', 'left', 'top', 'width', 'height', 'scaleX', 'scaleY'],
} as const;

export const JsonDataSchema = {
  type: 'object',
  properties: {
    lib: {
      type: 'string',
    },
    version: {
      type: 'string',
    },
    objects: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/FabricObject',
      },
    },
  },
  required: ['objects'],
} as const;

export const CanvasDataSchema = {
  type: 'object',
  properties: {
    width: {
      type: 'number',
    },
    height: {
      type: 'number',
    },
    zoom: {
      type: 'number',
    },
  },
  required: ['width', 'height', 'zoom'],
} as const;

export const GenerateImageInputSchema = {
  type: 'object',
  properties: {
    jsonData: {
      allOf: [
        {
          $ref: '#/components/schemas/JsonData',
        },
      ],
    },
    canvasData: {
      allOf: [
        {
          $ref: '#/components/schemas/CanvasData',
        },
      ],
    },
  },
  required: ['jsonData', 'canvasData'],
} as const;

export const UserDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    creation_time: {
      format: 'date-time',
      type: 'string',
    },
    last_modification_time: {
      format: 'date-time',
      type: 'string',
    },
    is_enabled: {
      type: 'boolean',
    },
    deletion_time: {
      format: 'date-time',
      type: 'string',
    },
    is_deleted: {
      type: 'boolean',
    },
    account: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    phone: {
      type: 'string',
    },
    user_type: {
      type: 'string',
      enum: ['Unset', 'Customer', 'ShopManager'],
    },
    erp_user_id: {
      type: 'string',
    },
  },
  required: [
    'id',
    'creation_time',
    'last_modification_time',
    'deletion_time',
    'is_deleted',
    'account',
    'name',
  ],
} as const;

export const UserPagedResultSchema = {
  type: 'object',
  properties: {
    input: {
      type: 'object',
    },
    totalCount: {
      type: 'number',
    },
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/UserDto',
      },
    },
  },
  required: ['totalCount', 'items'],
} as const;

export const UserDetailDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    creation_time: {
      format: 'date-time',
      type: 'string',
    },
    last_modification_time: {
      format: 'date-time',
      type: 'string',
    },
    is_enabled: {
      type: 'boolean',
    },
    deletion_time: {
      format: 'date-time',
      type: 'string',
    },
    is_deleted: {
      type: 'boolean',
    },
    account: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    phone: {
      type: 'string',
    },
    user_type: {
      type: 'string',
      enum: ['Unset', 'Customer', 'ShopManager'],
    },
    erp_user_id: {
      type: 'string',
    },
  },
  required: [
    'id',
    'creation_time',
    'last_modification_time',
    'deletion_time',
    'is_deleted',
    'account',
    'name',
  ],
} as const;

export const UserCreateInputSchema = {
  type: 'object',
  properties: {
    account: {
      type: 'string',
    },
    passoword: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    userType: {
      type: 'string',
      default: 'Unset',
      enum: ['Unset', 'Customer', 'ShopManager'],
    },
    gender: {
      type: 'string',
      default: 'Unknown',
      enum: ['Unknown', 'Male', 'Female'],
    },
    phone: {
      type: 'string',
    },
    is_enabled: {
      type: 'boolean',
    },
  },
  required: ['account', 'passoword', 'name', 'is_enabled'],
} as const;

export const UserUpdateInputSchema = {
  type: 'object',
  properties: {
    account: {
      type: 'string',
    },
    passoword: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    userType: {
      type: 'string',
      default: 'Unset',
      enum: ['Unset', 'Customer', 'ShopManager'],
    },
    gender: {
      type: 'string',
      default: 'Unknown',
      enum: ['Unknown', 'Male', 'Female'],
    },
    phone: {
      type: 'string',
    },
    is_enabled: {
      type: 'boolean',
    },
  },
  required: ['account', 'passoword', 'name', 'is_enabled'],
} as const;

export const ExcelUploadInputSchema = {
  type: 'object',
  properties: {
    file: {
      type: 'string',
      format: 'binary',
    },
    body: {
      type: 'object',
      default: '',
    },
  },
  required: ['file'],
} as const;

export const ActivityDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    creation_time: {
      format: 'date-time',
      type: 'string',
    },
    last_modification_time: {
      format: 'date-time',
      type: 'string',
    },
    is_enabled: {
      type: 'boolean',
    },
    deletion_time: {
      format: 'date-time',
      type: 'string',
    },
    is_deleted: {
      type: 'boolean',
    },
    title: {
      type: 'string',
    },
    cover_url: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    max_count: {
      type: 'number',
    },
    customers_count: {
      type: 'number',
    },
    inviter_configs_count: {
      type: 'number',
    },
    start_time: {
      format: 'date-time',
      type: 'string',
    },
    end_time: {
      format: 'date-time',
      type: 'string',
    },
    is_actived: {
      type: 'boolean',
    },
    is_image_seted: {
      type: 'boolean',
    },
  },
  required: [
    'id',
    'creation_time',
    'last_modification_time',
    'deletion_time',
    'is_deleted',
    'title',
  ],
} as const;

export const ActivityPagedResultSchema = {
  type: 'object',
  properties: {
    input: {
      type: 'object',
    },
    totalCount: {
      type: 'number',
    },
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ActivityDto',
      },
    },
  },
  required: ['totalCount', 'items'],
} as const;

export const CropDataDtoSchema = {
  type: 'object',
  properties: {
    x: {
      type: 'number',
    },
    y: {
      type: 'number',
    },
    width: {
      type: 'number',
    },
    height: {
      type: 'number',
    },
    rotate: {
      type: 'number',
    },
    scaleX: {
      type: 'number',
    },
    scaleY: {
      type: 'number',
    },
  },
} as const;

export const CropBoxDtoSchema = {
  type: 'object',
  properties: {
    left: {
      type: 'number',
    },
    top: {
      type: 'number',
    },
    width: {
      type: 'number',
    },
    height: {
      type: 'number',
    },
  },
} as const;

export const CropDtoSchema = {
  type: 'object',
  properties: {
    data: {
      allOf: [
        {
          $ref: '#/components/schemas/CropDataDto',
        },
      ],
    },
    box: {
      allOf: [
        {
          $ref: '#/components/schemas/CropBoxDto',
        },
      ],
    },
  },
} as const;

export const ActivityDetailDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    creation_time: {
      format: 'date-time',
      type: 'string',
    },
    last_modification_time: {
      format: 'date-time',
      type: 'string',
    },
    is_enabled: {
      type: 'boolean',
    },
    deletion_time: {
      format: 'date-time',
      type: 'string',
    },
    is_deleted: {
      type: 'boolean',
    },
    title: {
      type: 'string',
    },
    cover_url: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    max_count: {
      type: 'number',
    },
    customers_count: {
      type: 'number',
    },
    inviter_configs_count: {
      type: 'number',
    },
    start_time: {
      format: 'date-time',
      type: 'string',
    },
    end_time: {
      format: 'date-time',
      type: 'string',
    },
    is_actived: {
      type: 'boolean',
    },
    is_image_seted: {
      type: 'boolean',
    },
    content: {
      type: 'string',
    },
    image_base64: {
      type: 'string',
    },
    image_mimetype: {
      type: 'string',
    },
    image_crop: {
      allOf: [
        {
          $ref: '#/components/schemas/CropDto',
        },
      ],
    },
    image_size: {
      type: 'number',
    },
    image_last_modification_time: {
      format: 'date-time',
      type: 'string',
    },
    qrcode_template: {
      type: 'string',
    },
    designer_lib: {
      type: 'string',
    },
    designer_version: {
      type: 'string',
    },
    designer_json: {
      allOf: [
        {
          $ref: '#/components/schemas/GenerateImageInput',
        },
      ],
    },
  },
  required: [
    'id',
    'creation_time',
    'last_modification_time',
    'deletion_time',
    'is_deleted',
    'title',
    'designer_lib',
    'designer_version',
    'designer_json',
  ],
} as const;

export const ActivityCreateInputSchema = {
  type: 'object',
  properties: {
    title: {
      type: 'string',
    },
    cover_url: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    address: {
      type: 'string',
    },
    content: {
      type: 'string',
    },
    max_count: {
      type: 'number',
    },
    start_time: {
      format: 'date-time',
      type: 'string',
    },
    end_time: {
      format: 'date-time',
      type: 'string',
    },
    is_actived: {
      type: 'boolean',
    },
  },
  required: ['title', 'max_count', 'is_actived'],
} as const;

export const ActivityUpdateInputSchema = {
  type: 'object',
  properties: {
    title: {
      type: 'string',
    },
    cover_url: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    address: {
      type: 'string',
    },
    content: {
      type: 'string',
    },
    max_count: {
      type: 'number',
    },
    start_time: {
      format: 'date-time',
      type: 'string',
    },
    end_time: {
      format: 'date-time',
      type: 'string',
    },
    is_actived: {
      type: 'boolean',
    },
    is_enabled: {
      type: 'boolean',
    },
  },
  required: ['title', 'max_count', 'is_actived', 'is_enabled'],
} as const;

export const ActivityTemplateInputSchema = {
  type: 'object',
  properties: {
    file: {
      type: 'string',
      format: 'binary',
    },
    body: {
      allOf: [
        {
          $ref: '#/components/schemas/CropDto',
        },
      ],
    },
  },
  required: ['file', 'body'],
} as const;

export const ActivityCustomerDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    creation_time: {
      format: 'date-time',
      type: 'string',
    },
    last_modification_time: {
      format: 'date-time',
      type: 'string',
    },
    is_enabled: {
      type: 'boolean',
    },
    deletion_time: {
      format: 'date-time',
      type: 'string',
    },
    is_deleted: {
      type: 'boolean',
    },
    auto_id: {
      type: 'number',
    },
    customer_name: {
      type: 'string',
    },
    customer_phone: {
      type: 'string',
    },
    invitation_code: {
      type: 'string',
    },
    customer_gender: {
      type: 'string',
      default: 'Unknown',
      enum: ['Unknown', 'Male', 'Female'],
    },
    remarks: {
      type: 'string',
    },
    inviter_name: {
      type: 'string',
    },
    is_invited: {
      type: 'boolean',
    },
    is_checked: {
      type: 'boolean',
    },
    activity: {
      $ref: '#/components/schemas/ActivityDto',
    },
  },
  required: [
    'id',
    'creation_time',
    'last_modification_time',
    'deletion_time',
    'is_deleted',
    'customer_name',
  ],
} as const;

export const ActivityCustomerPagedResultSchema = {
  type: 'object',
  properties: {
    input: {
      type: 'object',
    },
    totalCount: {
      type: 'number',
    },
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ActivityCustomerDto',
      },
    },
  },
  required: ['totalCount', 'items'],
} as const;

export const ActivityCustomerDetailDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    creation_time: {
      format: 'date-time',
      type: 'string',
    },
    last_modification_time: {
      format: 'date-time',
      type: 'string',
    },
    is_enabled: {
      type: 'boolean',
    },
    deletion_time: {
      format: 'date-time',
      type: 'string',
    },
    is_deleted: {
      type: 'boolean',
    },
    auto_id: {
      type: 'number',
    },
    customer_name: {
      type: 'string',
    },
    customer_phone: {
      type: 'string',
    },
    invitation_code: {
      type: 'string',
    },
    customer_gender: {
      type: 'string',
      default: 'Unknown',
      enum: ['Unknown', 'Male', 'Female'],
    },
    remarks: {
      type: 'string',
    },
    inviter_name: {
      type: 'string',
    },
    is_invited: {
      type: 'boolean',
    },
    is_checked: {
      type: 'boolean',
    },
    activity: {
      $ref: '#/components/schemas/ActivityDto',
    },
  },
  required: [
    'id',
    'creation_time',
    'last_modification_time',
    'deletion_time',
    'is_deleted',
    'customer_name',
  ],
} as const;

export const ActivityCustomerCreateInputSchema = {
  type: 'object',
  properties: {
    customer_name: {
      type: 'string',
    },
    customer_gender: {
      type: 'string',
      default: 'Unknown',
      enum: ['Unknown', 'Male', 'Female'],
    },
    customer_phone: {
      type: 'string',
    },
    inviter_name: {
      type: 'string',
    },
    is_enabled: {
      type: 'boolean',
      default: true,
    },
    activity_id: {
      type: 'string',
    },
    inviter_config_id: {
      type: 'string',
    },
    inviter_erp_user_id: {
      type: 'string',
    },
  },
  required: ['customer_name', 'inviter_name', 'is_enabled'],
} as const;

export const ActivityCustomerUpdateInputSchema = {
  type: 'object',
  properties: {
    customer_name: {
      type: 'string',
    },
    customer_gender: {
      type: 'string',
      default: 'Unknown',
      enum: ['Unknown', 'Male', 'Female'],
    },
    customer_phone: {
      type: 'string',
    },
    inviter_name: {
      type: 'string',
    },
    is_enabled: {
      type: 'boolean',
      default: true,
    },
  },
  required: ['customer_name', 'inviter_name', 'is_enabled'],
} as const;

export const ActivityCustomerInvitersDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    creation_time: {
      format: 'date-time',
      type: 'string',
    },
    last_modification_time: {
      format: 'date-time',
      type: 'string',
    },
    is_enabled: {
      type: 'boolean',
    },
    deletion_time: {
      format: 'date-time',
      type: 'string',
    },
    is_deleted: {
      type: 'boolean',
    },
    auto_id: {
      type: 'number',
    },
    customer_name: {
      type: 'string',
    },
    customer_phone: {
      type: 'string',
    },
    invitation_code: {
      type: 'string',
    },
    customer_gender: {
      type: 'string',
      default: 'Unknown',
      enum: ['Unknown', 'Male', 'Female'],
    },
    remarks: {
      type: 'string',
    },
    inviter_name: {
      type: 'string',
    },
    is_invited: {
      type: 'boolean',
    },
    is_checked: {
      type: 'boolean',
    },
    activity: {
      $ref: '#/components/schemas/ActivityDto',
    },
  },
  required: [
    'id',
    'creation_time',
    'last_modification_time',
    'deletion_time',
    'is_deleted',
    'customer_name',
  ],
} as const;

export const ActivityCustomerInvitersDetailDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    creation_time: {
      format: 'date-time',
      type: 'string',
    },
    last_modification_time: {
      format: 'date-time',
      type: 'string',
    },
    is_enabled: {
      type: 'boolean',
    },
    deletion_time: {
      format: 'date-time',
      type: 'string',
    },
    is_deleted: {
      type: 'boolean',
    },
    auto_id: {
      type: 'number',
    },
    customer_name: {
      type: 'string',
    },
    customer_phone: {
      type: 'string',
    },
    invitation_code: {
      type: 'string',
    },
    customer_gender: {
      type: 'string',
      default: 'Unknown',
      enum: ['Unknown', 'Male', 'Female'],
    },
    remarks: {
      type: 'string',
    },
    inviter_name: {
      type: 'string',
    },
    is_invited: {
      type: 'boolean',
    },
    is_checked: {
      type: 'boolean',
    },
    activity: {
      $ref: '#/components/schemas/ActivityDto',
    },
  },
  required: [
    'id',
    'creation_time',
    'last_modification_time',
    'deletion_time',
    'is_deleted',
    'customer_name',
  ],
} as const;

export const ActivityCustomerInvitersCreateInputSchema = {
  type: 'object',
  properties: {
    customer_name: {
      type: 'string',
    },
    customer_gender: {
      type: 'string',
      default: 'Unknown',
      enum: ['Unknown', 'Male', 'Female'],
    },
    customer_phone: {
      type: 'string',
    },
    inviter_name: {
      type: 'string',
    },
    is_enabled: {
      type: 'boolean',
      default: true,
    },
    activity_id: {
      type: 'string',
    },
    inviter_config_id: {
      type: 'string',
    },
    inviter_erp_user_id: {
      type: 'string',
    },
  },
  required: ['customer_name', 'inviter_name', 'is_enabled'],
} as const;

export const ActivityCustomerInvitersUpdateInputSchema = {
  type: 'object',
  properties: {
    customer_name: {
      type: 'string',
    },
    customer_gender: {
      type: 'string',
      default: 'Unknown',
      enum: ['Unknown', 'Male', 'Female'],
    },
    customer_phone: {
      type: 'string',
    },
    inviter_name: {
      type: 'string',
    },
    is_enabled: {
      type: 'boolean',
      default: true,
    },
  },
  required: ['customer_name', 'inviter_name', 'is_enabled'],
} as const;

export const AuthInputSchema = {
  type: 'object',
  properties: {
    account: {
      type: 'string',
    },
    password: {
      type: 'string',
    },
    validate_code: {
      type: 'string',
    },
  },
  required: ['account', 'password', 'validate_code'],
} as const;

export const TokenResultSchema = {
  type: 'object',
  properties: {
    access_token: {
      type: 'string',
    },
    token_type: {
      type: 'string',
    },
    expires_in: {
      type: 'number',
    },
    refresh_token: {
      type: 'string',
    },
    creation_time: {
      format: 'date-time',
      type: 'string',
    },
  },
  required: ['access_token', 'token_type', 'expires_in'],
} as const;

export const RoleDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    creation_time: {
      format: 'date-time',
      type: 'string',
    },
    last_modification_time: {
      format: 'date-time',
      type: 'string',
    },
    is_enabled: {
      type: 'boolean',
    },
    deletion_time: {
      format: 'date-time',
      type: 'string',
    },
    is_deleted: {
      type: 'boolean',
    },
    name: {
      type: 'string',
    },
    code: {
      type: 'string',
    },
    is_public: {
      type: 'boolean',
    },
    is_static: {
      type: 'boolean',
    },
    is_default: {
      type: 'boolean',
    },
  },
  required: [
    'id',
    'creation_time',
    'last_modification_time',
    'deletion_time',
    'is_deleted',
    'name',
    'code',
  ],
} as const;

export const RolePagedResultSchema = {
  type: 'object',
  properties: {
    input: {
      type: 'object',
    },
    totalCount: {
      type: 'number',
    },
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/RoleDto',
      },
    },
  },
  required: ['totalCount', 'items'],
} as const;

export const RoleDetailDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    creation_time: {
      format: 'date-time',
      type: 'string',
    },
    last_modification_time: {
      format: 'date-time',
      type: 'string',
    },
    is_enabled: {
      type: 'boolean',
    },
    deletion_time: {
      format: 'date-time',
      type: 'string',
    },
    is_deleted: {
      type: 'boolean',
    },
    name: {
      type: 'string',
    },
    code: {
      type: 'string',
    },
    is_public: {
      type: 'boolean',
    },
    is_static: {
      type: 'boolean',
    },
    is_default: {
      type: 'boolean',
    },
  },
  required: [
    'id',
    'creation_time',
    'last_modification_time',
    'deletion_time',
    'is_deleted',
    'name',
    'code',
  ],
} as const;

export const RoleCreateInputSchema = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
    is_public: {
      type: 'boolean',
      default: true,
    },
    is_default: {
      type: 'boolean',
      default: false,
    },
    is_enabled: {
      type: 'boolean',
      default: true,
    },
    code: {
      type: 'string',
    },
    is_static: {
      type: 'boolean',
      default: false,
    },
  },
  required: ['name', 'code'],
} as const;

export const RoleUpdateInputSchema = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
    is_public: {
      type: 'boolean',
      default: true,
    },
    is_default: {
      type: 'boolean',
      default: false,
    },
    is_enabled: {
      type: 'boolean',
      default: true,
    },
  },
  required: ['name'],
} as const;

export const SetPermissionsInputSchema = {
  type: 'object',
  properties: {
    permissions: {
      type: 'array',
      items: {
        type: 'string',
      },
    },
  },
  required: ['permissions'],
} as const;

export const AppMenusDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    creation_time: {
      format: 'date-time',
      type: 'string',
    },
    last_modification_time: {
      format: 'date-time',
      type: 'string',
    },
    is_enabled: {
      type: 'boolean',
    },
    deletion_time: {
      format: 'date-time',
      type: 'string',
    },
    is_deleted: {
      type: 'boolean',
    },
    name: {
      type: 'string',
    },
    icon: {
      type: 'string',
    },
    url: {
      type: 'string',
    },
    path: {
      type: 'string',
    },
    code: {
      type: 'string',
    },
    is_public: {
      type: 'boolean',
    },
    is_static: {
      type: 'boolean',
    },
    is_default: {
      type: 'boolean',
    },
  },
  required: [
    'id',
    'creation_time',
    'last_modification_time',
    'deletion_time',
    'is_deleted',
    'name',
    'icon',
    'url',
    'path',
    'code',
  ],
} as const;

export const AppMenusPagedResultSchema = {
  type: 'object',
  properties: {
    input: {
      type: 'object',
    },
    totalCount: {
      type: 'number',
    },
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/AppMenusDto',
      },
    },
  },
  required: ['totalCount', 'items'],
} as const;

export const AppMenusDetailDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    creation_time: {
      format: 'date-time',
      type: 'string',
    },
    last_modification_time: {
      format: 'date-time',
      type: 'string',
    },
    is_enabled: {
      type: 'boolean',
    },
    deletion_time: {
      format: 'date-time',
      type: 'string',
    },
    is_deleted: {
      type: 'boolean',
    },
    name: {
      type: 'string',
    },
    icon: {
      type: 'string',
    },
    url: {
      type: 'string',
    },
    path: {
      type: 'string',
    },
    code: {
      type: 'string',
    },
    is_public: {
      type: 'boolean',
    },
    is_static: {
      type: 'boolean',
    },
    is_default: {
      type: 'boolean',
    },
  },
  required: [
    'id',
    'creation_time',
    'last_modification_time',
    'deletion_time',
    'is_deleted',
    'name',
    'icon',
    'url',
    'path',
    'code',
  ],
} as const;

export const AppMenusCreateInputSchema = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
    icon: {
      type: 'string',
    },
    url: {
      type: 'string',
    },
    path: {
      type: 'string',
    },
    code: {
      type: 'string',
    },
    is_public: {
      type: 'boolean',
      default: true,
    },
    is_default: {
      type: 'boolean',
      default: false,
    },
    is_enabled: {
      type: 'boolean',
      default: true,
    },
    is_static: {
      type: 'boolean',
      default: false,
    },
  },
  required: ['name', 'icon', 'url', 'path', 'code'],
} as const;

export const AppMenusUpdateInputSchema = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
    icon: {
      type: 'string',
    },
    url: {
      type: 'string',
    },
    path: {
      type: 'string',
    },
    code: {
      type: 'string',
    },
    is_public: {
      type: 'boolean',
      default: true,
    },
    is_default: {
      type: 'boolean',
      default: false,
    },
    is_enabled: {
      type: 'boolean',
      default: true,
    },
  },
  required: ['name', 'icon', 'url', 'path', 'code'],
} as const;

export const AppMenuSchema = {
  type: 'object',
  properties: {
    menu: {
      allOf: [
        {
          $ref: '#/components/schemas/AppMenusDto',
        },
      ],
    },
    badge: {
      type: 'number',
    },
  },
  required: ['menu'],
} as const;

export const AppMenusResultSchema = {
  type: 'object',
  properties: {
    input: {
      type: 'object',
    },
    totalCount: {
      type: 'number',
    },
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/AppMenu',
      },
    },
  },
  required: ['totalCount', 'items'],
} as const;

export const AuditLogDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    creation_time: {
      format: 'date-time',
      type: 'string',
    },
    last_modification_time: {
      format: 'date-time',
      type: 'string',
    },
    is_enabled: {
      type: 'boolean',
    },
    deletion_time: {
      format: 'date-time',
      type: 'string',
    },
    is_deleted: {
      type: 'boolean',
    },
    app_name: {
      type: 'string',
    },
    user_id: {
      type: 'string',
    },
    user_name: {
      type: 'string',
    },
    client_id: {
      type: 'string',
    },
    client_name: {
      type: 'string',
    },
    ip: {
      type: 'string',
    },
    browser_info: {
      type: 'string',
    },
    host: {
      type: 'string',
    },
    url: {
      type: 'string',
    },
    http_method: {
      type: 'string',
    },
    http_status: {
      type: 'string',
    },
    class_name: {
      type: 'string',
    },
    handler_name: {
      type: 'string',
    },
    headers: {
      type: 'string',
    },
    referer: {
      type: 'string',
    },
    accept_language: {
      type: 'string',
    },
    accept_encoding: {
      type: 'string',
    },
    data: {
      type: 'string',
    },
    duration: {
      type: 'string',
    },
    excution_time: {
      type: 'string',
    },
  },
  required: [
    'id',
    'creation_time',
    'last_modification_time',
    'is_enabled',
    'deletion_time',
    'is_deleted',
    'app_name',
    'user_id',
    'user_name',
    'client_id',
    'client_name',
    'ip',
    'browser_info',
    'host',
    'url',
    'http_method',
    'http_status',
    'class_name',
    'handler_name',
    'headers',
    'referer',
    'accept_language',
    'accept_encoding',
    'data',
    'duration',
    'excution_time',
  ],
} as const;

export const AuditLogPagedResultSchema = {
  type: 'object',
  properties: {
    input: {
      type: 'object',
    },
    totalCount: {
      type: 'number',
    },
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/AuditLogDto',
      },
    },
  },
  required: ['totalCount', 'items'],
} as const;

export const AuditLogDetailDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    creation_time: {
      format: 'date-time',
      type: 'string',
    },
    last_modification_time: {
      format: 'date-time',
      type: 'string',
    },
    is_enabled: {
      type: 'boolean',
    },
    deletion_time: {
      format: 'date-time',
      type: 'string',
    },
    is_deleted: {
      type: 'boolean',
    },
    app_name: {
      type: 'string',
    },
    user_id: {
      type: 'string',
    },
    user_name: {
      type: 'string',
    },
    client_id: {
      type: 'string',
    },
    client_name: {
      type: 'string',
    },
    ip: {
      type: 'string',
    },
    browser_info: {
      type: 'string',
    },
    host: {
      type: 'string',
    },
    url: {
      type: 'string',
    },
    http_method: {
      type: 'string',
    },
    http_status: {
      type: 'string',
    },
    class_name: {
      type: 'string',
    },
    handler_name: {
      type: 'string',
    },
    headers: {
      type: 'string',
    },
    referer: {
      type: 'string',
    },
    accept_language: {
      type: 'string',
    },
    accept_encoding: {
      type: 'string',
    },
    data: {
      type: 'string',
    },
    duration: {
      type: 'string',
    },
    excution_time: {
      type: 'string',
    },
  },
  required: [
    'id',
    'creation_time',
    'last_modification_time',
    'is_enabled',
    'deletion_time',
    'is_deleted',
    'app_name',
    'user_id',
    'user_name',
    'client_id',
    'client_name',
    'ip',
    'browser_info',
    'host',
    'url',
    'http_method',
    'http_status',
    'class_name',
    'handler_name',
    'headers',
    'referer',
    'accept_language',
    'accept_encoding',
    'data',
    'duration',
    'excution_time',
  ],
} as const;

export const AuditLogCreateInputSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    creation_time: {
      format: 'date-time',
      type: 'string',
    },
    last_modification_time: {
      format: 'date-time',
      type: 'string',
    },
    is_enabled: {
      type: 'boolean',
    },
    deletion_time: {
      format: 'date-time',
      type: 'string',
    },
    is_deleted: {
      type: 'boolean',
    },
    app_name: {
      type: 'string',
    },
    user_id: {
      type: 'string',
    },
    user_name: {
      type: 'string',
    },
    client_id: {
      type: 'string',
    },
    client_name: {
      type: 'string',
    },
    ip: {
      type: 'string',
    },
    browser_info: {
      type: 'string',
    },
    host: {
      type: 'string',
    },
    url: {
      type: 'string',
    },
    http_method: {
      type: 'string',
    },
    http_status: {
      type: 'string',
    },
    class_name: {
      type: 'string',
    },
    handler_name: {
      type: 'string',
    },
    headers: {
      type: 'string',
    },
    referer: {
      type: 'string',
    },
    accept_language: {
      type: 'string',
    },
    accept_encoding: {
      type: 'string',
    },
    data: {
      type: 'string',
    },
    duration: {
      type: 'string',
    },
    excution_time: {
      type: 'string',
    },
  },
  required: [
    'id',
    'creation_time',
    'last_modification_time',
    'is_enabled',
    'deletion_time',
    'is_deleted',
    'app_name',
    'user_id',
    'user_name',
    'client_id',
    'client_name',
    'ip',
    'browser_info',
    'host',
    'url',
    'http_method',
    'http_status',
    'class_name',
    'handler_name',
    'headers',
    'referer',
    'accept_language',
    'accept_encoding',
    'data',
    'duration',
    'excution_time',
  ],
} as const;

export const AuditLogUpdateInputSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    creation_time: {
      format: 'date-time',
      type: 'string',
    },
    last_modification_time: {
      format: 'date-time',
      type: 'string',
    },
    is_enabled: {
      type: 'boolean',
    },
    deletion_time: {
      format: 'date-time',
      type: 'string',
    },
    is_deleted: {
      type: 'boolean',
    },
    app_name: {
      type: 'string',
    },
    user_id: {
      type: 'string',
    },
    user_name: {
      type: 'string',
    },
    client_id: {
      type: 'string',
    },
    client_name: {
      type: 'string',
    },
    ip: {
      type: 'string',
    },
    browser_info: {
      type: 'string',
    },
    host: {
      type: 'string',
    },
    url: {
      type: 'string',
    },
    http_method: {
      type: 'string',
    },
    http_status: {
      type: 'string',
    },
    class_name: {
      type: 'string',
    },
    handler_name: {
      type: 'string',
    },
    headers: {
      type: 'string',
    },
    referer: {
      type: 'string',
    },
    accept_language: {
      type: 'string',
    },
    accept_encoding: {
      type: 'string',
    },
    data: {
      type: 'string',
    },
    duration: {
      type: 'string',
    },
    excution_time: {
      type: 'string',
    },
  },
  required: [
    'id',
    'creation_time',
    'last_modification_time',
    'is_enabled',
    'deletion_time',
    'is_deleted',
    'app_name',
    'user_id',
    'user_name',
    'client_id',
    'client_name',
    'ip',
    'browser_info',
    'host',
    'url',
    'http_method',
    'http_status',
    'class_name',
    'handler_name',
    'headers',
    'referer',
    'accept_language',
    'accept_encoding',
    'data',
    'duration',
    'excution_time',
  ],
} as const;

export const ErpUsersDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    employeeNo: {
      type: 'string',
    },
    organizationId: {
      type: 'string',
    },
    organizationName: {
      type: 'string',
    },
    departmentId: {
      type: 'string',
    },
    departmentName: {
      type: 'string',
    },
    departmentShortName: {
      type: 'string',
    },
    departmentEnCode: {
      type: 'string',
    },
    parentDeptId: {
      type: 'string',
    },
    parentDeptName: {
      type: 'string',
    },
    parentDeptShortName: {
      type: 'string',
    },
    grade: {
      type: 'string',
    },
    employmentStatusName: {
      type: 'string',
    },
    employmentStatusId: {
      type: 'string',
    },
    headImage: {
      type: 'string',
    },
    jobType: {
      type: 'number',
    },
    mobile: {
      type: 'string',
    },
    spelling: {
      type: 'string',
    },
    simpleSpelling: {
      type: 'string',
    },
    spellingFlag: {
      type: 'string',
    },
    gender: {
      type: 'string',
    },
  },
  required: ['id'],
} as const;

export const ErpUsersPagedResultSchema = {
  type: 'object',
  properties: {
    input: {
      type: 'object',
    },
    totalCount: {
      type: 'number',
    },
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ErpUsersDto',
      },
    },
  },
  required: ['totalCount', 'items'],
} as const;

export const UserSimpleDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    creation_time: {
      format: 'date-time',
      type: 'string',
    },
    last_modification_time: {
      format: 'date-time',
      type: 'string',
    },
    is_enabled: {
      type: 'boolean',
    },
    deletion_time: {
      format: 'date-time',
      type: 'string',
    },
    is_deleted: {
      type: 'boolean',
    },
    account: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
  },
  required: [
    'id',
    'creation_time',
    'last_modification_time',
    'is_enabled',
    'deletion_time',
    'is_deleted',
    'account',
    'name',
  ],
} as const;

export const InviterConfigDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    creation_time: {
      format: 'date-time',
      type: 'string',
    },
    last_modification_time: {
      format: 'date-time',
      type: 'string',
    },
    is_enabled: {
      type: 'boolean',
    },
    deletion_time: {
      format: 'date-time',
      type: 'string',
    },
    is_deleted: {
      type: 'boolean',
    },
    max_count: {
      type: 'number',
    },
    customers_count: {
      type: 'number',
    },
    customers_invited_count: {
      type: 'number',
    },
    customers_signed_count: {
      type: 'number',
    },
    activity: {
      allOf: [
        {
          $ref: '#/components/schemas/ActivityDto',
        },
      ],
    },
    inviter: {
      allOf: [
        {
          $ref: '#/components/schemas/UserSimpleDto',
        },
      ],
    },
  },
  required: [
    'id',
    'creation_time',
    'last_modification_time',
    'is_enabled',
    'deletion_time',
    'is_deleted',
    'max_count',
    'customers_count',
    'customers_invited_count',
    'customers_signed_count',
    'activity',
    'inviter',
  ],
} as const;

export const InviterConfigPagedResultSchema = {
  type: 'object',
  properties: {
    input: {
      type: 'object',
    },
    totalCount: {
      type: 'number',
    },
    items: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/InviterConfigDto',
      },
    },
  },
  required: ['totalCount', 'items'],
} as const;

export const InviterConfigDetailDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    creation_time: {
      format: 'date-time',
      type: 'string',
    },
    last_modification_time: {
      format: 'date-time',
      type: 'string',
    },
    is_enabled: {
      type: 'boolean',
    },
    deletion_time: {
      format: 'date-time',
      type: 'string',
    },
    is_deleted: {
      type: 'boolean',
    },
    max_count: {
      type: 'number',
    },
    customers_count: {
      type: 'number',
    },
    customers_invited_count: {
      type: 'number',
    },
    customers_signed_count: {
      type: 'number',
    },
    activity: {
      allOf: [
        {
          $ref: '#/components/schemas/ActivityDto',
        },
      ],
    },
    inviter: {
      allOf: [
        {
          $ref: '#/components/schemas/UserSimpleDto',
        },
      ],
    },
  },
  required: [
    'id',
    'creation_time',
    'last_modification_time',
    'is_enabled',
    'deletion_time',
    'is_deleted',
    'max_count',
    'customers_count',
    'customers_invited_count',
    'customers_signed_count',
    'activity',
    'inviter',
  ],
} as const;

export const InviterConfigCreateInputSchema = {
  type: 'object',
  properties: {
    max_count: {
      type: 'number',
      default: 1,
    },
    is_enabled: {
      type: 'boolean',
      default: true,
    },
    activity_id: {
      type: 'string',
      default: '',
    },
    inviter_user_id: {
      type: 'string',
      default: '',
    },
  },
  required: ['max_count', 'activity_id', 'inviter_user_id'],
} as const;

export const InviterConfigUpdateInputSchema = {
  type: 'object',
  properties: {
    max_count: {
      type: 'number',
      default: 1,
    },
    is_enabled: {
      type: 'boolean',
      default: true,
    },
  },
  required: ['max_count'],
} as const;

export const ScanDtoSchema = {
  type: 'object',
  properties: {
    type: {
      type: 'string',
    },
    input: {
      type: 'string',
    },
    message: {
      type: 'string',
    },
    success: {
      type: 'boolean',
    },
    result: {
      type: 'object',
    },
  },
  required: ['type', 'input', 'message'],
} as const;
